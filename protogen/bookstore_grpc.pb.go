// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bookstore.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookStore_ListBooks_FullMethodName = "/example.BookStore/ListBooks"
)

// BookStoreClient is the client API for BookStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookStoreClient interface {
	ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Book], error)
}

type bookStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBookStoreClient(cc grpc.ClientConnInterface) BookStoreClient {
	return &bookStoreClient{cc}
}

func (c *bookStoreClient) ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Book], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BookStore_ServiceDesc.Streams[0], BookStore_ListBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListBooksRequest, Book]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookStore_ListBooksClient = grpc.ServerStreamingClient[Book]

// BookStoreServer is the server API for BookStore service.
// All implementations must embed UnimplementedBookStoreServer
// for forward compatibility.
type BookStoreServer interface {
	ListBooks(*ListBooksRequest, grpc.ServerStreamingServer[Book]) error
	mustEmbedUnimplementedBookStoreServer()
}

// UnimplementedBookStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookStoreServer struct{}

func (UnimplementedBookStoreServer) ListBooks(*ListBooksRequest, grpc.ServerStreamingServer[Book]) error {
	return status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}
func (UnimplementedBookStoreServer) mustEmbedUnimplementedBookStoreServer() {}
func (UnimplementedBookStoreServer) testEmbeddedByValue()                   {}

// UnsafeBookStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookStoreServer will
// result in compilation errors.
type UnsafeBookStoreServer interface {
	mustEmbedUnimplementedBookStoreServer()
}

func RegisterBookStoreServer(s grpc.ServiceRegistrar, srv BookStoreServer) {
	// If the following call pancis, it indicates UnimplementedBookStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookStore_ServiceDesc, srv)
}

func _BookStore_ListBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookStoreServer).ListBooks(m, &grpc.GenericServerStream[ListBooksRequest, Book]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookStore_ListBooksServer = grpc.ServerStreamingServer[Book]

// BookStore_ServiceDesc is the grpc.ServiceDesc for BookStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.BookStore",
	HandlerType: (*BookStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBooks",
			Handler:       _BookStore_ListBooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bookstore.proto",
}

const (
	BookStoreBatch_ListBooks_FullMethodName = "/example.BookStoreBatch/ListBooks"
)

// BookStoreBatchClient is the client API for BookStoreBatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookStoreBatchClient interface {
	ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListBooksResponse], error)
}

type bookStoreBatchClient struct {
	cc grpc.ClientConnInterface
}

func NewBookStoreBatchClient(cc grpc.ClientConnInterface) BookStoreBatchClient {
	return &bookStoreBatchClient{cc}
}

func (c *bookStoreBatchClient) ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListBooksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BookStoreBatch_ServiceDesc.Streams[0], BookStoreBatch_ListBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListBooksRequest, ListBooksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookStoreBatch_ListBooksClient = grpc.ServerStreamingClient[ListBooksResponse]

// BookStoreBatchServer is the server API for BookStoreBatch service.
// All implementations must embed UnimplementedBookStoreBatchServer
// for forward compatibility.
type BookStoreBatchServer interface {
	ListBooks(*ListBooksRequest, grpc.ServerStreamingServer[ListBooksResponse]) error
	mustEmbedUnimplementedBookStoreBatchServer()
}

// UnimplementedBookStoreBatchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookStoreBatchServer struct{}

func (UnimplementedBookStoreBatchServer) ListBooks(*ListBooksRequest, grpc.ServerStreamingServer[ListBooksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}
func (UnimplementedBookStoreBatchServer) mustEmbedUnimplementedBookStoreBatchServer() {}
func (UnimplementedBookStoreBatchServer) testEmbeddedByValue()                        {}

// UnsafeBookStoreBatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookStoreBatchServer will
// result in compilation errors.
type UnsafeBookStoreBatchServer interface {
	mustEmbedUnimplementedBookStoreBatchServer()
}

func RegisterBookStoreBatchServer(s grpc.ServiceRegistrar, srv BookStoreBatchServer) {
	// If the following call pancis, it indicates UnimplementedBookStoreBatchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookStoreBatch_ServiceDesc, srv)
}

func _BookStoreBatch_ListBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookStoreBatchServer).ListBooks(m, &grpc.GenericServerStream[ListBooksRequest, ListBooksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BookStoreBatch_ListBooksServer = grpc.ServerStreamingServer[ListBooksResponse]

// BookStoreBatch_ServiceDesc is the grpc.ServiceDesc for BookStoreBatch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookStoreBatch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.BookStoreBatch",
	HandlerType: (*BookStoreBatchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBooks",
			Handler:       _BookStoreBatch_ListBooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bookstore.proto",
}
