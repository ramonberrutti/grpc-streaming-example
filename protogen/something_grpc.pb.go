// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: something.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SomethingUnary_GetSomething_FullMethodName = "/example.SomethingUnary/GetSomething"
)

// SomethingUnaryClient is the client API for SomethingUnary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SomethingUnaryClient interface {
	GetSomething(ctx context.Context, in *SomethingRequest, opts ...grpc.CallOption) (*SomethingResponse, error)
}

type somethingUnaryClient struct {
	cc grpc.ClientConnInterface
}

func NewSomethingUnaryClient(cc grpc.ClientConnInterface) SomethingUnaryClient {
	return &somethingUnaryClient{cc}
}

func (c *somethingUnaryClient) GetSomething(ctx context.Context, in *SomethingRequest, opts ...grpc.CallOption) (*SomethingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SomethingResponse)
	err := c.cc.Invoke(ctx, SomethingUnary_GetSomething_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SomethingUnaryServer is the server API for SomethingUnary service.
// All implementations must embed UnimplementedSomethingUnaryServer
// for forward compatibility.
type SomethingUnaryServer interface {
	GetSomething(context.Context, *SomethingRequest) (*SomethingResponse, error)
	mustEmbedUnimplementedSomethingUnaryServer()
}

// UnimplementedSomethingUnaryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSomethingUnaryServer struct{}

func (UnimplementedSomethingUnaryServer) GetSomething(context.Context, *SomethingRequest) (*SomethingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSomething not implemented")
}
func (UnimplementedSomethingUnaryServer) mustEmbedUnimplementedSomethingUnaryServer() {}
func (UnimplementedSomethingUnaryServer) testEmbeddedByValue()                        {}

// UnsafeSomethingUnaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SomethingUnaryServer will
// result in compilation errors.
type UnsafeSomethingUnaryServer interface {
	mustEmbedUnimplementedSomethingUnaryServer()
}

func RegisterSomethingUnaryServer(s grpc.ServiceRegistrar, srv SomethingUnaryServer) {
	// If the following call pancis, it indicates UnimplementedSomethingUnaryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SomethingUnary_ServiceDesc, srv)
}

func _SomethingUnary_GetSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SomethingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomethingUnaryServer).GetSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomethingUnary_GetSomething_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomethingUnaryServer).GetSomething(ctx, req.(*SomethingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SomethingUnary_ServiceDesc is the grpc.ServiceDesc for SomethingUnary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SomethingUnary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.SomethingUnary",
	HandlerType: (*SomethingUnaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSomething",
			Handler:    _SomethingUnary_GetSomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "something.proto",
}

const (
	SomethingStream_GetSomething_FullMethodName = "/example.SomethingStream/GetSomething"
)

// SomethingStreamClient is the client API for SomethingStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SomethingStreamClient interface {
	GetSomething(ctx context.Context, in *SomethingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SomethingResponse], error)
}

type somethingStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewSomethingStreamClient(cc grpc.ClientConnInterface) SomethingStreamClient {
	return &somethingStreamClient{cc}
}

func (c *somethingStreamClient) GetSomething(ctx context.Context, in *SomethingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SomethingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SomethingStream_ServiceDesc.Streams[0], SomethingStream_GetSomething_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SomethingRequest, SomethingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SomethingStream_GetSomethingClient = grpc.ServerStreamingClient[SomethingResponse]

// SomethingStreamServer is the server API for SomethingStream service.
// All implementations must embed UnimplementedSomethingStreamServer
// for forward compatibility.
type SomethingStreamServer interface {
	GetSomething(*SomethingRequest, grpc.ServerStreamingServer[SomethingResponse]) error
	mustEmbedUnimplementedSomethingStreamServer()
}

// UnimplementedSomethingStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSomethingStreamServer struct{}

func (UnimplementedSomethingStreamServer) GetSomething(*SomethingRequest, grpc.ServerStreamingServer[SomethingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetSomething not implemented")
}
func (UnimplementedSomethingStreamServer) mustEmbedUnimplementedSomethingStreamServer() {}
func (UnimplementedSomethingStreamServer) testEmbeddedByValue()                         {}

// UnsafeSomethingStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SomethingStreamServer will
// result in compilation errors.
type UnsafeSomethingStreamServer interface {
	mustEmbedUnimplementedSomethingStreamServer()
}

func RegisterSomethingStreamServer(s grpc.ServiceRegistrar, srv SomethingStreamServer) {
	// If the following call pancis, it indicates UnimplementedSomethingStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SomethingStream_ServiceDesc, srv)
}

func _SomethingStream_GetSomething_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SomethingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SomethingStreamServer).GetSomething(m, &grpc.GenericServerStream[SomethingRequest, SomethingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SomethingStream_GetSomethingServer = grpc.ServerStreamingServer[SomethingResponse]

// SomethingStream_ServiceDesc is the grpc.ServiceDesc for SomethingStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SomethingStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.SomethingStream",
	HandlerType: (*SomethingStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSomething",
			Handler:       _SomethingStream_GetSomething_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "something.proto",
}
